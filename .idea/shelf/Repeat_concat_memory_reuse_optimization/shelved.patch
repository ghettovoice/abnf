Index: operators.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package abnf\n\nimport (\n\t\"bytes\"\n\t\"sort\"\n\t\"unicode/utf8\"\n)\n\ntype Operator func(s []byte, ns Nodes) Nodes\n\nfunc literal(key string, val []byte, ci bool) Operator {\n\treturn func(s []byte, ns Nodes) Nodes {\n\t\tif len(s) < len(val) {\n\t\t\treturn ns\n\t\t}\n\n\t\tif !bytes.Equal(val, s[:len(val)]) {\n\t\t\tif !ci || !bytes.Equal(toLower(val), toLower(s[:len(val)])) {\n\t\t\t\treturn ns\n\t\t\t}\n\t\t}\n\n\t\treturn append(ns, Node{\n\t\t\tKey:   key,\n\t\t\tValue: s[:len(val)],\n\t\t})\n\t}\n}\n\nfunc Literal(key string, val []byte) Operator {\n\treturn literal(key, val, true)\n}\n\nfunc LiteralCS(key string, val []byte) Operator {\n\treturn literal(key, val, false)\n}\n\nfunc Range(key string, low, high []byte) Operator {\n\treturn func(s []byte, ns Nodes) Nodes {\n\t\tif len(s) < len(low) || bytes.Compare(s[:len(low)], low) < 0 {\n\t\t\treturn ns\n\t\t}\n\n\t\tvar l int\n\t\t_, size := utf8.DecodeRune(s)\n\t\tfor i := len(high); 0 < i; i-- {\n\t\t\tif len(high)-i < size && s[len(high)-i] <= high[i-1] {\n\t\t\t\tl++\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tif l == 0 {\n\t\t\treturn nil\n\t\t}\n\n\t\treturn append(ns, Node{\n\t\t\tKey:   key,\n\t\t\tValue: s[:l],\n\t\t})\n\t}\n}\n\nfunc alt(key string, fm bool, ps ...Operator) Operator {\n\treturn func(s []byte, ns Nodes) Nodes {\n\t\tsubns := newNodes()\n\t\tfor _, p := range ps {\n\t\t\tsubns = p(s, subns[:0])\n\t\t\tfor _, sn := range subns {\n\t\t\t\tns = append(ns, Node{\n\t\t\t\t\tKey:      key,\n\t\t\t\t\tValue:    s[:len(sn.Value)],\n\t\t\t\t\tChildren: Nodes{sn},\n\t\t\t\t})\n\t\t\t}\n\t\t\tif len(subns) > 0 && fm {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tsubns.free()\n\n\t\tif len(ns) > 1 {\n\t\t\tsort.Sort(nodeSorter(ns))\n\t\t}\n\t\treturn ns\n\t}\n}\n\nfunc Alt(key string, ps ...Operator) Operator {\n\treturn alt(key, false, ps...)\n}\n\nfunc AltFirst(key string, ps ...Operator) Operator {\n\treturn alt(key, true, ps...)\n}\n\nfunc concat(key string, all bool, ps ...Operator) Operator {\n\treturn func(s []byte, ns Nodes) Nodes {\n\t\tif len(ps) == 0 {\n\t\t\treturn ns\n\t\t}\n\n\t\tns = append(ns, Node{Key: key, Value: s[:0]})\n\t\tnewns := newNodes()\n\t\tsubns := newNodes()\n\t\tfor _, p := range ps {\n\t\t\tnewns = newns[:0]\n\t\t\tfor _, n := range ns {\n\t\t\t\tfor _, sn := range p(s[len(n.Value):], subns[:0]) {\n\t\t\t\t\tnewns = append(newns, Node{\n\t\t\t\t\t\tKey:      n.Key,\n\t\t\t\t\t\tValue:    s[:len(n.Value)+len(sn.Value)],\n\t\t\t\t\t\tChildren: append(append(make(Nodes, 0, len(n.Children)+1), n.Children...), sn),\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tif len(newns) > 0 {\n\t\t\t\tns = append(ns[:0], newns...)\n\t\t\t} else {\n\t\t\t\tns = ns[:0]\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tnewns.free()\n\t\tsubns.free()\n\n\t\tif len(ns) > 1 && !all {\n\t\t\tns[0] = ns.Best()\n\t\t\tns = ns[:1]\n\t\t}\n\t\treturn ns\n\t}\n}\n\nfunc Concat(key string, ps ...Operator) Operator {\n\treturn concat(key, false, ps...)\n}\n\nfunc ConcatAll(key string, ps ...Operator) Operator {\n\treturn concat(key, true, ps...)\n}\n\nfunc Repeat(key string, min, max uint, p Operator) Operator {\n\tvar minp Operator\n\tif min > 0 {\n\t\tps := make([]Operator, min)\n\t\tfor i := uint(0); i < min; i++ {\n\t\t\tps[i] = p\n\t\t}\n\t\tminp = concat(key, true, ps...)\n\t}\n\n\treturn func(s []byte, ns Nodes) Nodes {\n\t\tif 0 < max && max < min {\n\t\t\treturn ns\n\t\t}\n\n\t\tif min == 0 {\n\t\t\tns = append(ns, Node{Key: key, Value: s[:0]})\n\t\t} else {\n\t\t\tns = minp(s, ns)\n\t\t\tif len(ns) == 0 {\n\t\t\t\treturn ns\n\t\t\t}\n\t\t}\n\t\tif len(s) == 0 {\n\t\t\treturn ns\n\t\t}\n\n\t\tcurns := append(newNodes()[:0], ns...)\n\t\tnewns := newNodes()\n\t\tsubns := newNodes()\n\t\tvar i uint\n\t\tfor i = min; i < max || max == 0; i++ {\n\t\t\tnewns = newns[:0]\n\t\t\tfor _, n := range curns {\n\t\t\t\tfor _, sn := range p(s[len(n.Value):], subns[:0]) {\n\t\t\t\t\tnewns = append(newns, Node{\n\t\t\t\t\t\tKey:      n.Key,\n\t\t\t\t\t\tValue:    s[:len(n.Value)+len(sn.Value)],\n\t\t\t\t\t\tChildren: append(append(make(Nodes, 0, len(n.Children)+1), n.Children...), sn),\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tif len(newns) > 0 && newns.Compare(curns) == 1 {\n\t\t\t\tcurns = append(curns[:0], newns...)\n\t\t\t\tns = append(ns, newns...)\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tcurns.free()\n\t\tnewns.free()\n\t\tsubns.free()\n\n\t\tif len(ns) > 1 {\n\t\t\tsort.Sort(nodeSorter(ns))\n\t\t}\n\t\treturn ns\n\t}\n}\n\nfunc RepeatN(key string, n uint, p Operator) Operator {\n\treturn Repeat(key, n, n, p)\n}\n\nfunc Repeat0Inf(key string, p Operator) Operator {\n\treturn Repeat(key, 0, 0, p)\n}\n\nfunc Repeat1Inf(key string, p Operator) Operator {\n\treturn Repeat(key, 1, 0, p)\n}\n\nfunc Optional(key string, p Operator) Operator {\n\treturn Repeat(key, 0, 1, p)\n}\n\ntype nodeSorter Nodes\n\nfunc (ns nodeSorter) Len() int { return len(ns) }\n\nfunc (ns nodeSorter) Less(i, j int) bool {\n\treturn len(ns[i].Value) > len(ns[j].Value) ||\n\t\tlen(ns[i].Children) > len(ns[j].Children)\n}\n\nfunc (ns nodeSorter) Swap(i, j int) { ns[i], ns[j] = ns[j], ns[i] }\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/operators.go b/operators.go
--- a/operators.go	(revision f0ed8eca9b33e5d961bd0cf47ba21bd861c06693)
+++ b/operators.go	(date 1670508657455)
@@ -110,13 +110,20 @@
 					newns = append(newns, Node{
 						Key:      n.Key,
 						Value:    s[:len(n.Value)+len(sn.Value)],
-						Children: append(append(make(Nodes, 0, len(n.Children)+1), n.Children...), sn),
+						Children: append(append(newNodes()[:0], n.Children...), sn),
 					})
 				}
 			}
+
+			for _, n := range ns {
+				if n.Children != nil {
+					n.Children.free()
+				}
+			}
 			if len(newns) > 0 {
 				ns = append(ns[:0], newns...)
 			} else {
+				freeNodesChildren(newns)
 				ns = ns[:0]
 				break
 			}
@@ -126,6 +133,7 @@
 
 		if len(ns) > 1 && !all {
 			ns[0] = ns.Best()
+			freeNodesChildren(ns[1:])
 			ns = ns[:1]
 		}
 		return ns
@@ -178,14 +186,27 @@
 					newns = append(newns, Node{
 						Key:      n.Key,
 						Value:    s[:len(n.Value)+len(sn.Value)],
-						Children: append(append(make(Nodes, 0, len(n.Children)+1), n.Children...), sn),
+						Children: append(append(newNodes()[:0], n.Children...), sn),
 					})
 				}
 			}
+
 			if len(newns) > 0 && newns.Compare(curns) == 1 {
-				curns = append(curns[:0], newns...)
-				ns = append(ns, newns...)
+				freeNodesChildren(curns)
+				curns = curns[:0]
+				for _, n := range newns {
+					curns = append(curns, n)
+					ns = append(ns, Node{
+						Key:      n.Key,
+						Value:    n.Value,
+						Children: append(newNodes()[:0], n.Children...),
+					})
+				}
 			} else {
+				freeNodesChildren(newns)
+				if i > min {
+					freeNodesChildren(curns)
+				}
 				break
 			}
 		}
